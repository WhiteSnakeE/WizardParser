Below is an instruction that describes a task. Write a response that appropriately completes the request

        ### Instruction: Create java project using Spring Framework.Write classes 1) Person with attributes name surname email 2) class PersonService with method registerPerson with logic to register person to the database 3) class PersonControler with method registerPerson with endpoint and attribute presonService  4) Preson Repository 5) liquibase script and tests for all class methods

        ### Response:To create a Java project using Spring Framework, follow the steps below:

1. Create a new Java project in your IDE.
2. Add the following dependencies to your pom.xml file:

```xml
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-context</artifactId>
    <version>5.3.8</version>
</dependency>

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>

<dependency>
    <groupId>org.liquibase</groupId>
    <artifactId>liquibase-core</artifactId>
    <version>3.10.3</version>
</dependency>

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-test</artifactId>
    <scope>test</scope>
</dependency>
```

3. Create a new package called `com.example.demo` and create a new class called `Person` with the following attributes:

```java
package com.example.demo;

import javax.persistence.*;

@Entity
public class Person {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    @Column(name = "name")
    private String name;

    @Column(name = "surname")
    private String surname;

    @Column(name = "email")
    private String email;

    public Person() {
    }

    public Person(String name, String surname, String email) {
        this.name = name;
        this.surname = surname;
        this.email = email;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSurname() {
        return surname;
    }

    public void setSurname(String surname) {
        this.surname = surname;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }
}
```

4. Create a new class called `PersonRepository` with the following methods:

```java
package com.example.demo;

import org.springframework.data.jpa.repository.JpaRepository;

public interface PersonRepository extends JpaRepository<Person, Long> {
}
```

5. Create a new class called `PersonService` with the following methods:

```java
package com.example.demo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class PersonService {

    @Autowired
    private PersonRepository personRepository;

    public void registerPerson(Person person) {
        personRepository.save(person);
    }
}
```

6. Create a new class called `PersonController` with the following methods:

```java
package com.example.demo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/person")
public class PersonController {

    @Autowired
    private PersonService personService;

    @PostMapping("/register")
    public void registerPerson(@RequestBody Person person) {
        personService.registerPerson(person);
    }
}
```

7. Create a new file called `application.properties` in the `resources` folder and add the following properties:

```properties
spring.datasource.url=jdbc:mysql://localhost:3306/demo
spring.datasource.username=root
spring.datasource.password=password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
```

8. Create a new file called `liquibase.properties` in the `resources` folder and add the following properties:

```properties
changeLogFile=liquibase.xml
url=jdbc:mysql://localhost:3306/demo
username=root
password=password
driver=com.mysql.cj.jdbc.Driver
```

9. Create a new file called `liquibase.xml` in the `resources` folder and add the following configuration:

```xml
<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.10.xsd">

    <changeSet id="create-person-table" author="user">
        <createTable tableName="person">
            <column name="id" type="bigint">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="name" type="varchar(255)">
                <constraints nullable="false"/>
            </column>
            <column name="surname" type="varchar(255)">
                <constraints nullable="false"/>
            </column>
            <column name="email" type="varchar(255)">
                <constraints nullable="false"/>
            </column>
        </createTable>
    </changeSet>

</databaseChangeLog>
```

10. Create a new file called `PersonRepositoryTest.java` in the `test` folder and add the following test:

```java
package com.example.demo;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
class PersonRepositoryTest {

    @Autowired
    private PersonRepository personRepository;

    @Test
    void savePerson() {
        Person person = new Person("John", "Doe", "johndoe@example.com");
        personRepository.save(person);
        Person savedPerson = personRepository.findById(person.getId()).orElse(null);
        assertEquals(person, savedPerson);
    }
}
```

11. Create a new file called `PersonServiceTest.java` in the `test` folder and add the following test:

```java
package com.example.demo;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
class PersonServiceTest {

    @Autowired
    private PersonService personService;

    @Test
    void registerPerson() {
        Person person = new Person("John", "Doe", "johndoe@example.com");
        personService.registerPerson(person);
        Person savedPerson = personService.personRepository.findById(person.getId()).orElse(null);
        assertEquals(person, savedPerson);
    }
}
```

12. Create a new file called `PersonControllerTest.java` in the `test` folder and add the following test:

```java
package com.example.demo;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@ActiveProfiles("test")
class PersonControllerTest {

    @Autowired
    private TestRestTemplate restTemplate;

    @Test
    void registerPerson() {
        Person person = new Person("John", "Doe", "johndoe@example.com");
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<Person> request = new HttpEntity<>(person, headers);
        restTemplate.postForEntity("/person/register", request, String.class);
        Person savedPerson = personService.personRepository.findById(person.getId()).orElse(null);
        assertEquals(person, savedPerson);
    }
}
```

13. Run the application and test all the methods.
